<?
require 'autoload.php';

try{
    // проверка что параметр передан
    if (!isset($_POST['string'])) {
        throw new \UnexpectedValueException('POST параметр string не передан');

    }

    // проверка что передана не пустая строка (строку состоящую только из пробелов считаем пустой)
    $string = trim($_POST['string']);
    if (empty($string)) {
        throw new \UnexpectedValueException('POST параметр string не должен быть пустой строкой или строкой состоящей из пробелов');
    }

} catch (\Exception $e){
    \App\Response::sendFail($e->getMessage());
}

// Проверка скобок на валидность

try{
    $chkResult = \App\BracketsChk::run($string);
    if ($chkResult) {
        \App\Response::sendOk('Проверка пройдена успешно');
    } else {
        \App\Response::sendFail('Парность скобок не корректа');
    }
} catch (\InvalidArgumentException $e){
    \App\Response::sendFail($e->getMessage());
}


/*
 *
 * 1. Используя Docker, вы описали сборку двух контейнеров – один с nginx, второй – с php-fpm и вашим кодом.
Используя docker-compose вы запускаете оба контейнера.
Контейнер с nginx пробрасывает 80 порт на вашу хостовую машину и ожидает соединений.
Клиент соединяется, и шлёт следующий HTTP-запрос:

POST / HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 48

string=(()()()()))((((()()()))(()()()(((()))))))

String - это POST-параметр, который можно проверять:
1.1. [ обязательно ] На длину и непустоту
1.2. [ по желанию ] На корректность кол-ва открытых и закрытых скобок

Все запросы с динамическим содержимым (*.php) nginx, используя директиву fastcgi_pass, проксирует в контейнер с php-fpm и вашим кодом.
Nginx должен обрабатывать запросы не обращая внимания на директиву Host. После обработки,
• если строка корректна, то пользователю возвращается ответ 200 OK, с информационным текстом, что всё хорошо;
• если строка некорректна, то пользователю возвращается ответ 400 Bad Request, с информационным текстом, что всё плохо.

2. Развернуть на двухконтейнерном окружении (nginx+php-fpm) базовую установку Laravel.
https://laravel.com/docs/5.8/installation
Критерии оценки: 1. Строка в примере - только пример. На тестах она должна быть любой.
2. Соответствие скобок должно быть и с точки зрения скобок. Тест ")(" не должен проходить
3. Конструкции @ и die неприемлемы. Вместо них используйте исключения.
4. С точки зрения логики веб-сервиса ответ 400 - это валидное завершение работы скрипта.
 */

