drop schema public cascade;
create schema public;
create extension if not exists btree_gist;
create extension if not exists "uuid-ossp";

create table movies
(
    id     int primary key generated by default as identity,
    actual bool default true not null,
    name   varchar(255)      not null,
    constraint movies_unique_name
        exclude using hash (lower(name) with =)
        where (actual)
);

create type movie_attrs_type as enum ('date', 'bool', 'text', 'int', 'numeric');

create table movie_attrs
(
    id   int primary key generated by default as identity,
    name varchar(63)      not null unique,
    type movie_attrs_type not null
);

create table movie_values
(
    movie_id int not null references movies (id),
    attr_id  int not null references movie_attrs (id),
    date     timestamp with time zone,
    bool     bool,
    text     varchar,
    int      int,
    numeric  numeric(18, 2),
    constraint movie_values_unique unique (movie_id, attr_id)
);

create table halls
(
    id     int primary key generated by default as identity,
    actual bool default true not null,
    name   varchar(255)      not null,
    constraint halls_unique_name
        exclude using hash (lower(name) with =)
        where (actual)
);

create table seats
(
    id       bigint primary key generated by default as identity,
    hidden   bool default false,
    row_name varchar(16) not null,
    set_name varchar(16) not null,
    hall_id  int         not null references halls (id),
    constraint seats_unique unique (hall_id, row_name, set_name)
);

create type shows_status as enum ('draft', 'actual', 'canceled');

create table shows
(
    id       int primary key generated by default as identity,
    status   shows_status                not null,
    start_at timestamp without time zone not null,
    end_at   timestamp without time zone not null,
    movie_id int                         not null references movies (id),
    hall_id  int                         not null references halls (id),
    constraint shows_unique_timerange
        exclude using gist (hall_id with =, tsrange(start_at, end_at, '[]') with &&)
        where (status = 'actual')
);

create index shows_hall_idx on shows (hall_id);
-- create index shows_movie_idx on shows (movie_id);

create table clients
(
    id    bigint primary key generated by default as identity,
    name  varchar(255) not null,
    email varchar(255) not null unique
);

create table orders
(
    id          bigint primary key generated by default as identity,
    created_at  timestamp with time zone not null default current_timestamp,
    deadline_at timestamp with time zone          default null,
    client_id   bigint                   not null references clients (id)
);

create index orders_client_idx on orders (client_id);

create table tickets
(
    id          bigint primary key generated by default as identity,
    cost        decimal not null check (cost >= 0),
    order_id    bigint  not null references orders (id),
    show_id     int     not null references shows (id),
    seat_id     bigint  not null references seats (id),
    paid_at     timestamp with time zone default null,
    canceled_at timestamp with time zone default null,
    constraint tickets_unique_seats
        exclude (show_id with =, seat_id with =)
        where (canceled_at is null)
);

create index tickets_show_seat_idx on tickets (show_id, seat_id);
create index tickets_order_idx on tickets (order_id);

create table show_seats
(
    id               bigint primary key generated by default as identity,
    cost             decimal not null check (cost >= 0),
    show_id          int     not null references shows (id),
    seat_id          bigint  not null references seats (id),
    ticket_id        bigint unique references tickets (id),
    lock_id          varchar(128),
    lock_deadline_at timestamp with time zone,
    constraint show_seats_unique unique (show_id, seat_id)
);

create index show_seats_lock_idx on show_seats (lock_id);
